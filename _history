{"entries":[{"timestamp":1734588122377,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables>"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  "],[0,"<blo"]],"start1":12,"start2":12,"length1":70,"length2":75},{"diffs":[[0,"ver\""],[-1," x=\"0\" y=\"0\""],[0,"></b"]],"start1":107,"start2":107,"length1":20,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"basic.forever(function () {\n\t\n})"],[0,"\n"]],"start1":0,"start2":0,"length1":33,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,".md\""],[-1,","],[0,"\n    "],[-1,"    \"1_Intro.md\""],[1,"]"],[0,",\n    "],[-1," "],[-1,"   \"2_Basic_movements.md\",\n        \"3_Drawing_Robot.md\",\n        \"4_RC_Car.md\",\n        \"5_Line_follower.md\",\n        \"6_Obstacle_Avoider.md\"\n    ],\n    \"preferredEditor\": \"tsprj\""],[1,"\"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":230,"start2":230,"length1":215,"length2":44}]}]},{"timestamp":1734588688125,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0," x=\""],[-1,"1"],[0,"0\" y=\""],[-1,"1"],[0,"0\"><"]],"start1":106,"start2":106,"length1":16,"length2":14}]}]},{"timestamp":1734593052698,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"block"],[1,"t"],[0,"sprj\"\n}\n"]],"start1":428,"start2":428,"length1":21,"length2":17}]}]},{"timestamp":1734593052783,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0," x=\""],[1,"1"],[0,"0\" y=\""],[1,"1"],[0,"0\"><"]],"start1":106,"start2":106,"length1":14,"length2":16}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," \"*\""],[-1,",\n        \"pxt-kitronik-move-motor\": \"github:kitronikltd/pxt-kitronik-move-motor#v0.4.20\""],[0,"\n   "]],"start1":146,"start2":146,"length1":97,"length2":8},{"diffs":[[0,"itor\": \""],[-1,"t"],[1,"block"],[0,"sprj\"\n}\n"]],"start1":428,"start2":428,"length1":17,"length2":21}]}]},{"timestamp":1734593647141,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0," x=\""],[-1,"1"],[0,"0\" y=\""],[-1,"1"],[0,"0\"><"]],"start1":106,"start2":106,"length1":16,"length2":14}]}]},{"timestamp":1734597699695,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"itor\": \""],[-1,"block"],[1,"t"],[0,"sprj\"\n}\n"]],"start1":517,"start2":517,"length1":21,"length2":17}]}]},{"timestamp":1734597699746,"editorVersion":"7.0.51","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"ver\""],[-1," id=\"S;B.s_+0sDagT#FN!Lo%\""],[0," x=\""],[1,"1"],[0,"0\" y=\""],[1,"1"],[0,"0\"><"]],"start1":102,"start2":102,"length1":44,"length2":20}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"ne\": \"*\""],[1,",\n        \"pxt-kitronik-move-motor\": \"github:kitronikltd/pxt-kitronik-move-motor#v0.4.20\""],[0,"\n    },\n"]],"start1":142,"start2":142,"length1":16,"length2":105},{"diffs":[[0,"_Intro.md\",\n"],[1,"        \"2_Basic_movements.md\",\n"],[0,"        \"3_D"]],"start1":335,"start2":335,"length1":24,"length2":56},{"diffs":[[0,"_Robot.md\",\n"],[1,"        \"4_RC_Car.md\",\n"],[0,"        \"5_L"]],"start1":397,"start2":397,"length1":24,"length2":47},{"diffs":[[0,".md\""],[-1,",\n        \"2_Light_Sound.md\",\n        \"4_RC_Car_Tx.md\",\n        \"4_RC_Car_Rx.md\"\n    ],\n    \"testFiles\": [\n        \"test.ts\""],[0,"\n   "]],"start1":489,"start2":489,"length1":132,"length2":8},{"diffs":[[0,"itor\": \""],[-1,"t"],[1,"block"],[0,"sprj\"\n}\n"]],"start1":517,"start2":517,"length1":17,"length2":21}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1734588122376,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"Move Motor Tutorial\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1734593052698,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"0\" y=\"0\"></block></xml>","main.ts":"basic.forever(function () {\n\t\n})\n","README.md":"","1_Intro.md":"# Project 5 : Piano\n\n## {Introduction @unplugged}\n\n**Transform your Microbit into a Piano ! **\n\n![Description of Image](https://raw.githubusercontent.com/Edusharks/Microbit-Basics-Resource/main/project9%3APiano/Piano.gif)\n\nTurn your Microbit into a fun piano !\n \nBy using buttons and a buzzer, you can play different musical notes. Pressing a button changes the sound, letting you create your own tunes. It's a cool way to explore music and learn about technology ! \n\n\n## {Components @unplugged}\n\n![Cartoon of the Rock Paper Scissors game](https://raw.githubusercontent.com/Edusharks/Microbit-Basics-Resource/main/project9%3APiano/CN.png)\n\n\n## {Connection @unplugged}\n\n** Connections **\n\n**Step 1**  \nGrab your **Microbit**, **Breadboard** and move to next Step ..\n![Image 1](https://raw.githubusercontent.com/Edusharks/Microbit-Basics-Resource/main/project9%3APiano/S1.png)\n\n## {Connection @unplugged}\n\n**Step 2**  \nPlace 5 Pushbuttons on the breadboard as shown below  \n![Image 2](https://raw.githubusercontent.com/Edusharks/Microbit-Basics-Resource/main/project9%3APiano/S2.png)\n\n## {Connection @unplugged}\n\n**Step 3**  \nPlace 5 1kohm Resistor one by one an show in the below steps\n![Image 3](https://raw.githubusercontent.com/Edusharks/Microbit-Basics-Resource/main/project9%3APiano/S3.png)\n\n![Image 4](https://raw.githubusercontent.com/Edusharks/Microbit-Basics-Resource/main/project9%3APiano/S4.png)\n\n![Image 5](https://raw.githubusercontent.com/Edusharks/Microbit-Basics-Resource/main/project9%3APiano/S5.png)\n\n![Image 6](https://raw.githubusercontent.com/Edusharks/Microbit-Basics-Resource/main/project9%3APiano/S6.png)\n\n![Image 7](https://raw.githubusercontent.com/Edusharks/Microbit-Basics-Resource/main/project9%3APiano/S7.png)\n\n## {Connection @unplugged}\n**Step 4**  \nConnect the **3v** pin of Microbit to the Resistor as shown\n![Image 8](https://raw.githubusercontent.com/Edusharks/Microbit-Basics-Resource/main/project9%3APiano/S8.png)\n\n## {Connection @unplugged}\n**Step 5**  \nConnect the Pushbutton Pins One by one as shown below in an Series connection  \n![Image 9](https://raw.githubusercontent.com/Edusharks/Microbit-Basics-Resource/main/project9%3APiano/S9.png)\n\n![Image 10](https://raw.githubusercontent.com/Edusharks/Microbit-Basics-Resource/main/project9%3APiano/S10.png)\n\n![Image 11](https://raw.githubusercontent.com/Edusharks/Microbit-Basics-Resource/main/project9%3APiano/S11.png)\n\n![Image 12](https://raw.githubusercontent.com/Edusharks/Microbit-Basics-Resource/main/project9%3APiano/S12.png)\n\n## {Connection @unplugged}\n**Step 6**  \nConnect the Pushbutton series connection with Microbit Pin **P0**\n![Image 13](https://raw.githubusercontent.com/Edusharks/Microbit-Basics-Resource/main/project9%3APiano/S13.png)\n\n## {Connection @unplugged}\n**Step 7**  \nAdd a resistor as Shown\n![Image 14](https://raw.githubusercontent.com/Edusharks/Microbit-Basics-Resource/main/project9%3APiano/S14.png)\n\n## {Connection @unplugged}\n**Step 8**  \nCoonnect the Onter end of the resistor witht the **GND** of ** Microbit**\n![Image 15](https://raw.githubusercontent.com/Edusharks/Microbit-Basics-Resource/main/project9%3APiano/S15.png)\nTurn your micro:bit into a **Rock Paper Scissors** game that you can play with your friends!\n\n## {Start Programming @unplugged}\nConnect you **Microbit** with your Computer\n![Lets Start Programming Image](https://raw.githubusercontent.com/Edusharks/Microbit-Basics-Resource/main/project9%3APiano/LSP.png)\n\n \n\n## {Step 11}\n\nFirst we need to make a variable to keep track of value read from **P0**.   \nA variable is a container for storing values. Click on the ``||variables:Variables||`` category in the Toolbox. Click on the **Make a Variable** button. Give your new variable the name \"Value\" and click Ok.\n\n![A animation that shows how to create a variable](https://raw.githubusercontent.com/Edusharks/Microbit-Basics-Resource/main/project9%3APiano/S0.gif)\n\n```blocks\nbasic.forever(function () {\n\t\n})\n```\n\n## {Step 12}\n\nClick on the ``||variables:Variables||`` category in the Toolbox again. You'll notice that there are some new blocks that have appeared. Drag a ``||variables:set Value||`` block into the ``||Basic: forever||`` block.\n\n```blocks\nlet Value = 0\nbasic.forever(function () {\n    Value = 0\n})\n```\n\n\n\n## {Step 13}\n\nClick on the ``||math:Math||`` category in the Toolbox. Drag a ``||math:pick random||`` block and drop it into the ``||variables:set hand||`` block replacing the number 0. Now when we shake our micro:bit, the variable hand will contain a random number between 1 and 3.\n\n```blocks\nlet hand = 0;\ninput.onGesture(Gesture.Shake, function() {\n    hand = randint(1, 3)\n})\n```\n\n```blockconfig.global\nrandint(1, 3)\n```\n\n```template\nbasic.forever(function () {\n\t\n})\n```","2_Basic_movements.md":"\n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://makecode.microbit.org/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n","3_Drawing_Robot.md":"\n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://makecode.microbit.org/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n","4_RC_Car.md":"\n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://makecode.microbit.org/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n","5_Line_follower.md":"\n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://makecode.microbit.org/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n","6_Obstacle_Avoider.md":"\n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://makecode.microbit.org/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n","pxt.json":"{\n    \"name\": \"Move Motor Tutorial\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"1_Intro.md\",\n        \"2_Basic_movements.md\",\n        \"3_Drawing_Robot.md\",\n        \"4_RC_Car.md\",\n        \"5_Line_follower.md\",\n        \"6_Obstacle_Avoider.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}},{"timestamp":1734597699695,"editorVersion":"7.0.51","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"0\" y=\"0\"></block></xml>","main.ts":"basic.forever(function () {\n\t\n})\n","README.md":"","1_Intro.md":"# Project 5 : Piano\n\n## {Introduction @unplugged}\n\n**Transform your Microbit into a Piano ! **\n\n![Description of Image](https://raw.githubusercontent.com/Edusharks/Microbit-Basics-Resource/main/project9%3APiano/Piano.gif)\n\nTurn your Microbit into a fun piano !\n \nBy using buttons and a buzzer, you can play different musical notes. Pressing a button changes the sound, letting you create your own tunes. It's a cool way to explore music and learn about technology ! \n\n\n## {Components @unplugged}\n\n![Cartoon of the Rock Paper Scissors game](https://raw.githubusercontent.com/Edusharks/Microbit-Basics-Resource/main/project9%3APiano/CN.png)\n\n\n## {Connection @unplugged}\n\n** Connections **\n\n**Step 1**  \nGrab your **Microbit**, **Breadboard** and move to next Step ..\n![Image 1](https://raw.githubusercontent.com/Edusharks/Microbit-Basics-Resource/main/project9%3APiano/S1.png)\n\n## {Connection @unplugged}\n\n**Step 2**  \nPlace 5 Pushbuttons on the breadboard as shown below  \n![Image 2](https://raw.githubusercontent.com/Edusharks/Microbit-Basics-Resource/main/project9%3APiano/S2.png)\n\n## {Connection @unplugged}\n\n**Step 3**  \nPlace 5 1kohm Resistor one by one an show in the below steps\n![Image 3](https://raw.githubusercontent.com/Edusharks/Microbit-Basics-Resource/main/project9%3APiano/S3.png)\n\n![Image 4](https://raw.githubusercontent.com/Edusharks/Microbit-Basics-Resource/main/project9%3APiano/S4.png)\n\n![Image 5](https://raw.githubusercontent.com/Edusharks/Microbit-Basics-Resource/main/project9%3APiano/S5.png)\n\n![Image 6](https://raw.githubusercontent.com/Edusharks/Microbit-Basics-Resource/main/project9%3APiano/S6.png)\n\n![Image 7](https://raw.githubusercontent.com/Edusharks/Microbit-Basics-Resource/main/project9%3APiano/S7.png)\n\n## {Connection @unplugged}\n**Step 4**  \nConnect the **3v** pin of Microbit to the Resistor as shown\n![Image 8](https://raw.githubusercontent.com/Edusharks/Microbit-Basics-Resource/main/project9%3APiano/S8.png)\n\n## {Connection @unplugged}\n**Step 5**  \nConnect the Pushbutton Pins One by one as shown below in an Series connection  \n![Image 9](https://raw.githubusercontent.com/Edusharks/Microbit-Basics-Resource/main/project9%3APiano/S9.png)\n\n![Image 10](https://raw.githubusercontent.com/Edusharks/Microbit-Basics-Resource/main/project9%3APiano/S10.png)\n\n![Image 11](https://raw.githubusercontent.com/Edusharks/Microbit-Basics-Resource/main/project9%3APiano/S11.png)\n\n![Image 12](https://raw.githubusercontent.com/Edusharks/Microbit-Basics-Resource/main/project9%3APiano/S12.png)\n\n## {Connection @unplugged}\n**Step 6**  \nConnect the Pushbutton series connection with Microbit Pin **P0**\n![Image 13](https://raw.githubusercontent.com/Edusharks/Microbit-Basics-Resource/main/project9%3APiano/S13.png)\n\n## {Connection @unplugged}\n**Step 7**  \nAdd a resistor as Shown\n![Image 14](https://raw.githubusercontent.com/Edusharks/Microbit-Basics-Resource/main/project9%3APiano/S14.png)\n\n## {Connection @unplugged}\n**Step 8**  \nCoonnect the Onter end of the resistor witht the **GND** of ** Microbit**\n![Image 15](https://raw.githubusercontent.com/Edusharks/Microbit-Basics-Resource/main/project9%3APiano/S15.png)\nTurn your micro:bit into a **Rock Paper Scissors** game that you can play with your friends!\n\n## {Start Programming @unplugged}\nConnect you **Microbit** with your Computer\n![Lets Start Programming Image](https://raw.githubusercontent.com/Edusharks/Microbit-Basics-Resource/main/project9%3APiano/LSP.png)\n\n \n\n## {Step 11}\n\nFirst we need to make a variable to keep track of value read from **P0**.   \nA variable is a container for storing values. Click on the ``||variables:Variables||`` category in the Toolbox. Click on the **Make a Variable** button. Give your new variable the name \"Value\" and click Ok.\n\n![A animation that shows how to create a variable](https://raw.githubusercontent.com/Edusharks/Microbit-Basics-Resource/main/project9%3APiano/S0.gif)\n\n```blocks\nbasic.forever(function () {\n\t\n})\n```\n\n## {Step 12}\n\nClick on the ``||variables:Variables||`` category in the Toolbox again. You'll notice that there are some new blocks that have appeared. Drag a ``||variables:set Value||`` block into the ``||Basic: forever||`` block.\n\n```blocks\nlet Value = 0\nbasic.forever(function () {\n    Value = 0\n})\n```\n\n\n\n## {Step 13}\n\nClick on the ``||math:Math||`` category in the Toolbox. Drag a ``||math:pick random||`` block and drop it into the ``||variables:set hand||`` block replacing the number 0. Now when we shake our micro:bit, the variable hand will contain a random number between 1 and 3.\n\n```blocks\nlet hand = 0;\ninput.onGesture(Gesture.Shake, function() {\n    hand = randint(1, 3)\n})\n```\n\n```blockconfig.global\nrandint(1, 3)\n```\n\n```template\nbasic.forever(function () {\n\t\n})\n```","2_Basic_movements.md":"\n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://makecode.microbit.org/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n","3_Drawing_Robot.md":"\n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://makecode.microbit.org/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n","4_RC_Car.md":"\n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://makecode.microbit.org/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n","5_Line_follower.md":"\n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://makecode.microbit.org/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n","6_Obstacle_Avoider.md":"\n/**\n* Use this file to define custom functions and blocks.\n* Read more at https://makecode.microbit.org/blocks/custom\n*/\n\nenum MyEnum {\n    //% block=\"one\"\n    One,\n    //% block=\"two\"\n    Two\n}\n\n/**\n * Custom blocks\n */\n//% weight=100 color=#0fbc11 icon=\"\"\nnamespace custom {\n    /**\n     * TODO: describe your function here\n     * @param n describe parameter here, eg: 5\n     * @param s describe parameter here, eg: \"Hello\"\n     * @param e describe parameter here\n     */\n    //% block\n    export function foo(n: number, s: string, e: MyEnum): void {\n        // Add code here\n    }\n\n    /**\n     * TODO: describe your function here\n     * @param value describe value here, eg: 5\n     */\n    //% block\n    export function fib(value: number): number {\n        return value <= 1 ? value : fib(value -1) + fib(value - 2);\n    }\n}\n","pxt.json":"{\n    \"name\": \"Move Motor Tutorial\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"pxt-kitronik-move-motor\": \"github:kitronikltd/pxt-kitronik-move-motor#v0.4.20\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"1_Intro.md\",\n        \"2_Basic_movements.md\",\n        \"3_Drawing_Robot.md\",\n        \"4_RC_Car.md\",\n        \"5_Line_follower.md\",\n        \"6_Obstacle_Avoider.md\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1734598127247}